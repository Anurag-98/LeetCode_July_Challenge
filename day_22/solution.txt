/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    public:
    
    //Complete the function below!
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        //Edge case, when blank input->return blank vector!
        if(root==NULL){
            return {};
        }
        
        //IDEA : Take two stacks for storing levels in zig-zag fashion(Alternate reverse)
        stack<TreeNode*> s1;
        stack<TreeNode*> s2;

        s1.push(root);
        
        //A vector to store the final result
        vector<vector<int>> result;

    /*  Keep looping till either one of stack has elements!
        [Approach : While pushing one stack's elements into one vector,
                    keep pushing it's children into another stack]
    */
        while(!s1.empty() || !s2.empty()){
            
            vector<int> entryForS1;
            while(!s1.empty()){

                TreeNode* current = s1.top();
                s1.pop();
                
                entryForS1.push_back(current->val);
                
                if(current->left!=NULL){
                    s2.push(current->left);
                }
                if(current->right!=NULL){
                    s2.push(current->right);
                }
            }
            
            if(!entryForS1.empty()){
                result.push_back(entryForS1);
            }
                                    
            vector<int> entryForS2;

            while(!s2.empty()){

                TreeNode* current = s2.top();
                s2.pop();
                                
                entryForS2.push_back(current->val);
                
                if(current->right!=NULL){
                    s1.push(current->right);
                }
                if(current->left!=NULL){
                    s1.push(current->left);
                }
            }
            
             if(!entryForS2.empty()){
                result.push_back(entryForS2);
            }
        }
        
        return result;        
    }
};