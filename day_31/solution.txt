class Solution {
    
    public:
    
    //Complete the function below
    int climbStairs(int n) {     
/***********
//       RECURSIVE APPROACH (TIME LIMIT EXCEEDED )     
        
        //Base Case (only possible way is 1 step)
        if(n==1){
            return 1;
        }
        //Base Case (2 possible ways : 1 step + 1 step, 2 steps)
        if(n==2){
            return 2;
        }
        
        //Call Recursion for answer(Only 2 possibilities of direction,
        //                          either 1st step is 1 or 1st step is of 2)
        return climbStairs(n-1) + climbStairs(n-2);
        
*************/
        
        //                  DP APPROACH(OPTIMAL)
        
        if(n==1 || n==2){
            return n;
        }
        
        //Making dp to store results for re-using(i.e. avoiding repetitive calculations )
        int*dp = new int[n+1];
        
        //filling some base values
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        
        for(int i=3;i<=n;i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        //storing answer in a variable!
        int ans = dp[n];
        
        //freeing the dynamically allotted space we created
        delete [] dp;
        
        return ans;
    }
};