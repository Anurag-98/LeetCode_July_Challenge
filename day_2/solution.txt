/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    public:
    
    // Complete the function below!
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        
        //Vector to store final result
        vector<vector<int>> result;
        
        if(root==NULL){
            return result;
        }
        
        //Using a queue for maintaining levels
        queue<TreeNode*> q;

        q.push(root);
        
        
        while(!q.empty()){
            
            int size = q.size();
            vector<int> entry;
            
            //Cureent size are entries at particular level
            while(size>0){
                
                TreeNode *front = q.front();
                q.pop();
                
                entry.push_back(front->val);

                if(front->left!=NULL){
                    q.push(front->left);

                }
                if(front->right!=NULL){
                    q.push(front->right);
                }
                size--;
            }
            
            //Inserting the level in starting(as in question reverse is asked)
            result.insert(result.begin(),entry);

        }
        
        return result;
        
    }
};