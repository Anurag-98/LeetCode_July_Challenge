/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    public:
    
    //Complete the function below!
    bool isSameTree(TreeNode* p, TreeNode* q) {
        
        //      ||   RECURSION APPROACH    ||
        
        //If both trees are empty(i.e. same structure), return true!
        if(p==NULL && q==NULL){
            return true;
        }
        
        //1) If both trees are non-empty, then perform checks :-
        if(p!=NULL && q!=NULL){
            
            //1.1) If root val is same, then check further:
            if(p->val==q->val){
                
                //Call recursion on left sub-tree
                bool lcheck = isSameTree(p->left,q->left);
                
                //1.1.1) If left sub-tree matches, then check further:
                if(lcheck){
                    
                    //Call recursion on right sub-tree
                    bool rcheck = isSameTree(p->right,q->right);
                    
                    //1.1.1.1) If right sub-tree matches, return true!:
                    if(rcheck){
                        
                        return true;
                     
                    //1.1.1.1') If right sub-tree don't match, return false!
                    }else{
                        
                        return false;
                    }
                    
                //1.1.1') If left sub-tree don't match,no need to check further
                }else{
                    return false;
                }
           
            //1.1') For different root val,no need to check further
            }else{
                return false;
            }
            
        //1') This else symbolises that one tree is null(i.e. different tree structure)
        }else{
            
            return false;
        }
        
        return false;
    }
};